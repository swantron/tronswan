name: React App CI/CD with Coverage and Playwright

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
          
      - name: Install Yarn
        run: npm install -g yarn
        
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Build application
        run: yarn build
        
      - name: Run tests with coverage
        run: yarn test:coverage
        
      - name: Extract coverage percentage
        id: coverage
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE%"
          
      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30
          
      - name: Coverage Summary
        run: |
          echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Coverage**: ${{ steps.coverage.outputs.coverage }}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Coverage reports have been uploaded as artifacts." >> $GITHUB_STEP_SUMMARY
          echo "Current coverage: ${{ steps.coverage.outputs.coverage }}%" >> $GITHUB_STEP_SUMMARY

  deploy-and-validate:
    runs-on: ubuntu-latest
    needs: build-test-coverage
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Poll deployment status
        run: |
          RETRIES=30
          SLEEP_DURATION=15
          APP_ID="0513ce4c-b074-4139-bb38-a1c6a5bc97a6"
          DIGITALOCEAN_ACCESS_TOKEN="${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}"
          echo "Polling DigitalOcean App Platform deployment status..."
          for ((i=1;i<=RETRIES;i++)); do
            echo "Making request to DigitalOcean API..."
            RESPONSE=$(curl -s -X GET -H "Content-Type: application/json" -H "Authorization: Bearer $DIGITALOCEAN_ACCESS_TOKEN" "https://api.digitalocean.com/v2/apps/$APP_ID/deployments?per_page=1")
            echo "Response: $RESPONSE"
            if echo "$RESPONSE" | jq -e '.errors' > /dev/null; then
              echo "Error in response: $(echo $RESPONSE | jq '.errors')"
              exit 1
            fi
            DEPLOYMENT_STATUS=$(echo $RESPONSE | jq -r '.deployments[0].progress.steps[] | select(.name == "deploy").status')
            echo "Attempt $i: Deployment status is $DEPLOYMENT_STATUS"
            if [ "$DEPLOYMENT_STATUS" == "SUCCESS" ]; then
              echo "Deployment completed successfully."
              break
            fi
            if [ $i -eq $RETRIES ]; then
              echo "Deployment did not complete after $RETRIES attempts."
              exit 1
            fi
            sleep $SLEEP_DURATION
          done
          if [ "$DEPLOYMENT_STATUS" != "SUCCESS" ]; then
            echo "Deployment did not succeed."
            exit 1
          fi
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'
          
      - name: Install Yarn
        run: npm install -g yarn
        
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Install Playwright Browsers
        run: yarn playwright install
        
      - name: Run Playwright Tests
        run: |
          echo 'Running full Playwright test suite against deployed site...'
          yarn test:e2e
